<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-03-02T02:56:18+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Seroo’s Blog</title><subtitle></subtitle><author><name>{&quot;name&quot;=&gt;nil, &quot;avatar&quot;=&gt;nil, &quot;bio&quot;=&gt;nil, &quot;location&quot;=&gt;nil, &quot;email&quot;=&gt;nil, &quot;links&quot;=&gt;[{&quot;label&quot;=&gt;&quot;Email&quot;, &quot;icon&quot;=&gt;&quot;fas fa-fw fa-envelope-square&quot;}, {&quot;label&quot;=&gt;&quot;Website&quot;, &quot;icon&quot;=&gt;&quot;fas fa-fw fa-link&quot;}, {&quot;label&quot;=&gt;&quot;Twitter&quot;, &quot;icon&quot;=&gt;&quot;fab fa-fw fa-twitter-square&quot;}, {&quot;label&quot;=&gt;&quot;Facebook&quot;, &quot;icon&quot;=&gt;&quot;fab fa-fw fa-facebook-square&quot;}, {&quot;label&quot;=&gt;&quot;GitHub&quot;, &quot;icon&quot;=&gt;&quot;fab fa-fw fa-github&quot;}, {&quot;label&quot;=&gt;&quot;Instagram&quot;, &quot;icon&quot;=&gt;&quot;fab fa-fw fa-instagram&quot;}]}</name></author><entry><title type="html">Android Process and thread</title><link href="http://localhost:4000/android/process-and-thread" rel="alternate" type="text/html" title="Android Process and thread" /><published>2020-02-27T00:00:00+09:00</published><updated>2020-02-27T00:00:00+09:00</updated><id>http://localhost:4000/android/android-process-thread</id><content type="html" xml:base="http://localhost:4000/android/process-and-thread">&lt;h1 id=&quot;processes-and-threads&quot;&gt;Processes and threads&lt;/h1&gt;

&lt;p&gt;한 앱(Application)의 컴포넌트(Component)가 실행되고 있지 않은 상황에서 앱이 실행될 때 안드로이드 시스템은 단일 스레드로 새로운 Linux 프로세스를 시작한다. 기본적으로 같은 앱의 컴포넌트는 같은 프로세스와 스레드(Main Thread)에서 시작된다. 하지만 앱과 컴포넌트를 위한 프로세스가 이미 있다면 컴포넌트는 이미 존재하는 프로세스와 스레드에서 실행된다. 그러나 한 앱에서 각각의 컴포넌트를 다른 프로세스에서 실행할 수 있게 설정할 수 있으며, 모든 프로세스에서 추가적인 스레드를 만들 수 있다.&lt;/p&gt;

&lt;h2 id=&quot;processes&quot;&gt;Processes&lt;/h2&gt;

&lt;p&gt;일반적으로 모든 컴포넌트는 같은 앱, 같은 프로세스에서 실행되며 변경하는 것을 권장하지 않는다. 그러나 프로세스 제어가 필요한 상황이 있을 경우 &lt;strong&gt;Manifest&lt;/strong&gt;파일에서 제어할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Manifest&lt;/strong&gt;에는 &lt;strong&gt;Activity&lt;/strong&gt;, &lt;strong&gt;Service&lt;/strong&gt;, &lt;strong&gt;Receiver&lt;/strong&gt;, &lt;strong&gt;Provider&lt;/strong&gt;같은 각각의 컴포넌트에 대한 요소의 정보가 적혀있고, Manifest에는 해당 컴포넌트가 실행되는 프로세스를 지정할 수 있는 &lt;em&gt;android:process&lt;/em&gt; 속성을 지원한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;android:process&lt;/em&gt; 속성을 이용해 설정하면 컴포넌트를 아래와 같이 작동하도록 변경할 수 있다.&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;각 컴포넌트가 자체 프로세스에서 실행되도록 할 수 있다.&lt;/li&gt;
    &lt;li&gt;일부 컴포넌트가 프로세스를 공유하고 다른 컴포넌트는 공유하지 않도록 할 수 있다.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;android:process&lt;/em&gt; 설정을 통해서 같은 Linux 사용자 아이디와 같은 인증서로 서명되도록 할 수 있고, 다른 앱의 컴포넌트를 동일한 프로세스에서 실행할 수 있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Manifest&lt;/strong&gt;의 &lt;em&gt;application&lt;/em&gt; 요소에도 &lt;em&gt;android:process&lt;/em&gt; 속성을 지원한다. &lt;em&gt;android:process&lt;/em&gt; 속성이 설정되면 &lt;strong&gt;모든 컴포넌트&lt;/strong&gt;에 속성이 적용된다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;안드로이드 시스템이 메모리가 부족하거나 사용자에게 즉시 서비스를 제공하기 위해 프로세스에 필요한 경우, &lt;strong&gt;프로세스 종료 우선순위&lt;/strong&gt;에 의해 &lt;strong&gt;프로세스가 종료될 수 있다&lt;/strong&gt;. 종료된 프로세스에 따라서 프로세스 안의 실행중인 앱은 강제종료 된다. 하지만 컴포넌트가 다시 수행되면 해당 컴포넌트에 대한 프로세스가 다시 시작된다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;프로세스 종료 우선순위는 &lt;a href=&quot;https://developer.android.com/guide/components/activities/process-lifecycle&quot;&gt;&lt;em&gt;여기&lt;/em&gt;&lt;/a&gt;를 참고하자.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;threads&quot;&gt;Threads&lt;/h2&gt;

&lt;p&gt;앱이 실행될 때 실행된 앱을 위해 안드로이드 시스템에서 하나의 스레드를 만들어 주는데 이것을 &lt;em&gt;메인 스레드&lt;/em&gt; 라고 한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;안드로이드 시스템에서 &lt;em&gt;메인 스레드&lt;/em&gt;는 굉장히 중요하다. 왜 중요한지는 아래와 같다.&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;UI 그리기를 포함하여 적절한 사용자 UI에 이벤트를 전달한다.&lt;/li&gt;
    &lt;li&gt;앱에서 거의 모든 안드로이드 UI 툴킷 컴포넌트와 상호작용에 사용하는 스레드이다.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;메인 스레드&lt;/em&gt;는 종종 &lt;em&gt;UI 스레드&lt;/em&gt; 라고 불린다. 특정 상황에서 메인 스레드가 UI 스레드가 아닐 수 있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;다른 스레드상에서 복수의 뷰를 가지고 있는 시스템 앱&lt;/strong&gt;의 경우 UI 스레드와 메인 스레드가 다를 수 있다. 그래서 @UIThread 어노테이션은 앱의 뷰 계층에서만 사용해야 하고, @MainThread 어노테이션은 앱의 라이프사이클 관련 코드에서 사용해야 한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;안드로이드 시스템은 각각의 인스턴스를 위해 스레드를 분리하지 않는다. 모든 컴포넌트는 같은 프로세스의 UI 스레드 안에서 초기화가 진행되고, UI 스레드에서 각각의 컴포넌트는 시스템의 호출을 전달받는다. 따라서 시스템 콜백 메소드는 항상 앱 프로세스의 UI 스레드에서 결과를 받는다.&lt;/p&gt;

&lt;p&gt;예를 들어, 한 화면에서 사용자가 버튼을 터치하면 터치 UI 스레드는 터치 이벤트를 해당 위젯(이 예제에서는 버튼)에 전달한다. 그리고 버튼이 눌린 상태에서 다시 눌리기 전 상태로 복귀하기 위해 이벤트 큐에 무효화 요청을 보내고, UI 스레드는 해당 요청을 이벤트 큐에서 꺼내어 위젯에 다시 그리라고 통보한다.&lt;/p&gt;

&lt;p&gt;사용자 상호작용에 응답하여 앱이 집중적인 작업을 수행할 때, 단일 스레드 모델은 앱을 제대로 구현하지 않으면 성능이 저하될 수 있다. 정확히 말하자면, 네트워크 작업이나 데이터베이스 작업을 UI 스레드에서 진행하는 경우 작업이 실행되는 동안 UI 스레드가 차단된다.&lt;/p&gt;

&lt;p&gt;UI 스레드가 차단되면, 그리기 이벤트 같은 이벤트들을 보낼 수 없고, 사용자 관점에서는 앱이 멈춰있는 것으로 보인다. 더 나쁜것은 UI 스레드가 몇 초 이상 차단되면 ANR 다이얼로그가 사용자에게 보여지고, 사용자는 앱을 강제종료 할 수 있으며, 이 행위는 앱의 삭제까지 이어질 수 있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;추가적으로 안드로이드 UI 툴킷은 스레드에 안전하지 않다. 그래서 개발자는 UI를 UI 스레드 외의 스레드에서 조작하면 안된다. 이 말은 즉 UI 조작은 반드시 UI 스레드에서 이루어져야 하며, 안드로이드 단일 스레드 모델의 룰은 아래와 같다.&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;UI 스레드를 블록하면 안된다.&lt;/li&gt;
    &lt;li&gt;UI 스레드외의 스레드에서 안드로이드 UI 툴킷에 접근하면 안된다.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;worker-thread&quot;&gt;Worker Thread&lt;/h2&gt;

&lt;p&gt;Thread 섹션에서 설명했듯이 UI 스레드를 차단하지 않는것이 매우 중요하다. 네트워크 작업, 데이터베이스 작업같이 긴 수행시간을 가진 작업을 수행할 경우 Background, Worker 스레드로 분리해서 작업해야 한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Background, Worker 스레드에서 UI에 접근하면 안된다!!!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;안드로이드에서 외부 스레드(Background, Worker)에서 UI 스레드로 접근하는 몇가지 방법을 제공한다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Activity.runOnUiThread(Runnable)&lt;/li&gt;
  &lt;li&gt;View.post(Runnable)&lt;/li&gt;
  &lt;li&gt;View.postDelayed(Runnable, long)&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Runnable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// a potentially time consuming task&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;bitmap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;processBitMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;image.png&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;imageView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;post&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;imageView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setImageBitmap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bitmap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;err&quot;&gt;위의&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;예제의&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;경우&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;외부&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;스레드에서&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;백그라운드&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;작업을&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;마친&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;후&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ImageView&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;조작은&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;항상&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UI&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;스레드에서&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;이루어&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;진다&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;thread-safe-method&quot;&gt;Thread safe method&lt;/h2&gt;

&lt;p&gt;특정 상황에서 하나의 스레드 이상에서 호출되는 메소드의 경우 스레드에 안전하도록 작성해야 한다.&lt;/p&gt;

&lt;p&gt;이 상황은 주로 바운드 서비스안에 있는 메소드 같이 메소드를 외부에서 호출하는 경우에 발생한다. &lt;em&gt;IBinder&lt;/em&gt; 에서 구현된 메소드에 대한 호출이 &lt;em&gt;IBinder&lt;/em&gt;가 실행되고 있는 것과 동일한 프로세스에서 실행중인 경우 호출자 스레드에서 메소드가 실행된다. 그러나 &lt;em&gt;IBInder&lt;/em&gt; 에서 구현된 메소드가 다른 프로세스에서 호출될 때 해당 메소드는 IBinder와 동일한 프로세스에서 시스템이 유지하고 있는 스레드 풀에서 선택한 스레드로 실행된다.(이 경우 프로세스의 UI 스레드에서는 실행되지 않는다.)&lt;/p&gt;

&lt;p&gt;예를들어 서비스 프로세스의 UI 스레드에서 서비스의 &lt;em&gt;onBind()&lt;/em&gt; 메소드를 호출하지만, &lt;em&gt;onBind()&lt;/em&gt;가 반환하는 객체는 스레드 풀 안의 다른 스레드로부터 호출된다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;서비스는 한 개 이상의 클라이언트를 가질 수 있고, 한 개 이상의 스레드 풀 안의 스레드가 &lt;strong&gt;동시에&lt;/strong&gt; &lt;strong&gt;동일한&lt;/strong&gt; &lt;em&gt;IBinder&lt;/em&gt; 메소드를 사용할 수 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;마찬가지로 &lt;em&gt;컨텐트프로바이더&lt;/em&gt;는 다른 프로세스에서 발생하는 데이터 요청을 받을 수 있다. &lt;em&gt;컨텐트리졸버&lt;/em&gt; 및 &lt;em&gt;컨텐트프로바이더&lt;/em&gt; 클래스는 프로세스 간 IPC 관리 방법에 관한 자세한 사항은 숨기지만, &lt;strong&gt;이러한 요청&lt;/strong&gt;에 응답하는 &lt;em&gt;컨텐트프로바이더&lt;/em&gt; 메소드는 프로세스에 대한 UI 스레드가 아니라, &lt;em&gt;컨텐트프로바이더&lt;/em&gt; 프로세스안의 스레드 풀에서 호출된다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;이러한 요청 이란?
컨턴트프로바이드 메소드 - &lt;em&gt;query()&lt;/em&gt;, &lt;em&gt;insert()&lt;/em&gt;, &lt;em&gt;delete()&lt;/em&gt;, &lt;em&gt;update()&lt;/em&gt;, &lt;em&gt;getType()&lt;/em&gt; 를 의미한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;interprocess-communication&quot;&gt;Interprocess communication&lt;/h2&gt;

&lt;p&gt;안드로이드는 RPC(remote procedure) 호출을 이용한 IPC(interprocess communication) 메커니즘을 제공하는데, 이 메커니즘은 특정 메소드가 Activity나 다른 앱의 컴포넌트에 의해 호출되는 지만 원격으로 실행되고, 결과도 호출자에게 전달된다.&lt;/p&gt;

&lt;p&gt;여기에는 메소드 호출과 그 데이터를 운영체제가 이해할 수 있는 수준으로 분해하여 로컬 프로세스 주소 공간에서 원격 프로세스 주소 공간으로 전송한 다음, 거기서 메소드 호출을 재조립하고 다시 재연하는 작업을 진행한다.&lt;/p&gt;

&lt;p&gt;그런 다음 반환 값은 반대 방향으로 전송된다. Android는 이러한 IPC 트랜잭션을 수행하기 위한 모든 코드를 제공하므로 RPC 프로그래밍 인터페이스를 정의하고 구현하는 데 집중할 수 있다.&lt;/p&gt;

&lt;h2 id=&quot;요약&quot;&gt;요약&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;(기존에 프로세스가 존재하지 않는다는 전제하에)앱이 실행될 때 메인스레드로 Linux 프로세스를 시작한다.&lt;/li&gt;
  &lt;li&gt;Manifest에서 각 컴포넌트별 프로세스를 설정 가능하다. (application 요소에 프로세스를 설정하게 되면, 하위 컴포넌트는 application에서 설정한 프로세스를 따라가게 된다.)&lt;/li&gt;
  &lt;li&gt;메인 스레드가 종종 UI 스레드라고 불리지만, 메인 스레드가 UI 스레드가 아닌 경우도 발생한다.&lt;/li&gt;
  &lt;li&gt;메인 스레드가 차단되지 않게 주의해야 하고, 작업 시간이 긴 작업의 경우 Worker 스레드로 실행해야 한다.&lt;/li&gt;
  &lt;li&gt;한 개 이상의 스레드에서 불릴 가능성이 있는 메소드는 스레드에 안전하도록 작성해야 한다.(바운드 서비스의 메소드 등)&lt;/li&gt;
  &lt;li&gt;안드로이드는 IPC 메커니즘을 제공한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;참조&quot;&gt;참조&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.android.com/guide/components/processes-and-threads&quot;&gt;안드로이드 도큐먼트&lt;/a&gt;&lt;/p&gt;</content><author><name>{&quot;name&quot;=&gt;nil, &quot;avatar&quot;=&gt;nil, &quot;bio&quot;=&gt;nil, &quot;location&quot;=&gt;nil, &quot;email&quot;=&gt;nil, &quot;links&quot;=&gt;[{&quot;label&quot;=&gt;&quot;Email&quot;, &quot;icon&quot;=&gt;&quot;fas fa-fw fa-envelope-square&quot;}, {&quot;label&quot;=&gt;&quot;Website&quot;, &quot;icon&quot;=&gt;&quot;fas fa-fw fa-link&quot;}, {&quot;label&quot;=&gt;&quot;Twitter&quot;, &quot;icon&quot;=&gt;&quot;fab fa-fw fa-twitter-square&quot;}, {&quot;label&quot;=&gt;&quot;Facebook&quot;, &quot;icon&quot;=&gt;&quot;fab fa-fw fa-facebook-square&quot;}, {&quot;label&quot;=&gt;&quot;GitHub&quot;, &quot;icon&quot;=&gt;&quot;fab fa-fw fa-github&quot;}, {&quot;label&quot;=&gt;&quot;Instagram&quot;, &quot;icon&quot;=&gt;&quot;fab fa-fw fa-instagram&quot;}]}</name></author><category term="Android" /><category term="Process" /><category term="Thread" /><summary type="html">Processes and threads</summary></entry><entry><title type="html">Android Activity - 3</title><link href="http://localhost:4000/android/activity-other" rel="alternate" type="text/html" title="Android Activity - 3" /><published>2020-02-25T00:00:00+09:00</published><updated>2020-02-26T00:00:00+09:00</updated><id>http://localhost:4000/android/android-activity-03</id><content type="html" xml:base="http://localhost:4000/android/activity-other">&lt;h2 id=&quot;activity-ejection-memory&quot;&gt;Activity ejection memory&lt;/h2&gt;

&lt;p&gt;안드로이드에서 메모리 용량이 부족하면 시스템이 프로세스를 강제종료하여 메모리를 확보하는데, 이 때 시스템이 강제종료하는 프로세스는 &lt;strong&gt;프로세스의 상태&lt;/strong&gt;에 관련이 있고, 프로세스의 상태는 &lt;strong&gt;프로세스 안에서 활동중인 Activity의 상태&lt;/strong&gt;와 연관이 있다. 아래의 표는 프로세스의 상태, Activity의 상태 및 시스템이 프로세스를 종료시키는 우선순위를 표시한 것이다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;시스템에 의해 강제종료될 가능성&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;프로세스 상태&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Activity 상태&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Least&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Foreground&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Create&lt;br /&gt;Started &lt;br /&gt; resumed&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;More&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Background(lost focus)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Paused&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Most&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Background(not visible)&lt;br /&gt;Empty&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Stoped&lt;br /&gt;Destroyed&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;시스템은 Activity를 메모리에서 직접적으로 강제종료 하지 않는 대신 Activity가 실행되고 있는 프로세스를 종료하여 Activity 뿐만 아니라 프로세스에서 실행되고있는 모든것을 같이 종료한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;사용자가 설정메뉴 안에 있는 앱관리 메뉴에서 프로세스를 강제종료 시킬 수 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;saving-and-resotre-transient-ui-state&quot;&gt;Saving and resotre transient UI state&lt;/h2&gt;

&lt;p&gt;사용자는 설정변경(가로모드에서 세로모드, 세로모드에서 가로모드로 변경될 때)이 일어날 때 UI(User Interface)의 상태가 그대로 일 것이라고 기대하지만, 안드로이드 에서는 그런 설정변경이 일어날 때 기본적으로 Activity를 강제종료 후 재생성 하므로 기존에 사용했던 UI를 제거하고 다시 생성한다.(즉 처음으로 돌아간다.)&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;유사하게 사용자가 앱을 사용하다가, 다른 앱으로 이동하거나 장시간 사용한 앱을 백그라운드에 두고 다시 돌아왔을 때 마지막에 사용했던 상태와 같은 상태일거라고 생각하지만, 왠만하면 시스템이 앱 프로세스를 종료하기 때문에 첫 스텝부터 다시 시작한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;우리는 위와같이 안드로이드 시스템 제약에 의해서 Activity가 종료되는 상황 속에서 ViewModel, onSaveInstanceState, Local Storage(Local database)를 사용해 UI 데이터를 보호해야 한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;이 포스팅의 예제에서는 &lt;strong&gt;onSaveInstanceState&lt;/strong&gt;를 기반으로 다룰것이다. &lt;strong&gt;onSaveInstanceState&lt;/strong&gt;는 설정변경이 일어나거나, 안드로이드 시스템에 의해 프로세스가 강제종료되고 다시 시작했을 때 UI 상태가  가볍다면(기본 타입이거나 String 같은 가벼운 객체일 때) 이를 유지할 수 있다. 하지만 대부분의 경우 &lt;strong&gt;onSaveInstanceState&lt;/strong&gt;에서 직렬화 비직렬화 이슈가 발생하기 때문에 사용한다면 &lt;strong&gt;ViewModel&lt;/strong&gt;과 &lt;strong&gt;onSaveInstanceState&lt;/strong&gt;를 같이 사용 할 것을 권장하고 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;instance-state&quot;&gt;Instance state&lt;/h2&gt;

&lt;p&gt;사용자가 뒤로가기 버튼을 이용하여 종료하거나, &lt;strong&gt;finish()&lt;/strong&gt; 메소드를 이용하여 Activity를 종료하면 개발자는 &lt;strong&gt;아무 처리를 하지 않아도 된다.&lt;/strong&gt; 하지만 안드로이드 시스템 제약으로 Activity가 강제종료 됐을때 시스템은 이 Activity가 존재했다는 것을 기억을 하고 있고, 사용자가 다시 시스템에 의해 강제종료된 Activity를 실행할 때 이전 강제종료된 Activity의 마지막 상태를 참고하여 시스템은 새로운 Activity를 실행 한다.&lt;/p&gt;

&lt;p&gt;시스템이 이전 상태를 복원하는데 사용하는 데이터를 인스턴스 상태(Instance State)라고 하며, 이것은 Key-Value 페어로 이루어진 Bundle 객체이다. 기본적으로 시스템은 Bundle 객체를 이용하여 각각의 View의 상태를 저장하며, Activity가 시스템 제약에 의해 강제종료 되고 재생성될때 &lt;strong&gt;개발자의 추가적인 코드 없이&lt;/strong&gt; Bundle 객체를 이용하여 View의 상태를 복원 한다.(EditText안의 있는 텍스트 같은 값)&lt;/p&gt;

&lt;p&gt;그러나 Bundle은 큰 데이터를 저장하는데 적합하지 않다. 왜냐하면 Bundle 객체는 직렬화를 메인 쓰레드에 요청하고, 시스템 프로세스 메모리를 사용하기 때문이다. 결국 UI 상태를 저장하려면 local datastorage, onSaveInstanceState, ViewModel을 적절히 조합하여 사용해야 한다.&lt;/p&gt;

&lt;h2 id=&quot;save-ui-state-using-onsaveinstancestate&quot;&gt;Save UI state using onSaveInstanceState&lt;/h2&gt;

&lt;p&gt;Activity가 &lt;strong&gt;OnStop&lt;/strong&gt;콜백을 호출한 다음 &lt;strong&gt;onSaveInstanceState&lt;/strong&gt;를 호출하여 인스턴스 상태 Bundle 객체에 추가적인 데이터를 저장할 기회를 준다. 아래와 같이 &lt;strong&gt;onSaveInstanceState&lt;/strong&gt; 메소드를 재정의 하여 사용할 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onSaveInstanceState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;outState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Save the user's current game state&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;outState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;putInt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;STATE_SCORE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;currentScore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;putInt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;STATE_LEVEL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;currentLevel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Always call the superclass so it can save the view hierarchy state&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;onSaveInstanceState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;outState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;companion&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;STATE_SCORE&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;playerScore&quot;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;STATE_LEVEL&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;playerLevel&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;이전에도 언급 했듯이 사용자의 데이터나, DataBase의 데이터를 저장할 적당한 장소를 찾지 못한다면 onStop 에서 데이터를 저장 하는것이 좋다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;restore-activity-ui-state-using-saved-instance-state&quot;&gt;Restore activity UI state using saved instance state&lt;/h2&gt;

&lt;p&gt;Activity가 재생성 됐을 때 이전에 저장한 데이터를 이용하여 &lt;strong&gt;onCreate&lt;/strong&gt; or &lt;strong&gt;onRestoreInstanceState&lt;/strong&gt;를 이용하여 복원할 수 있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;&lt;strong&gt;onCreate&lt;/strong&gt;나 &lt;strong&gt;onRestoreInstnaceState&lt;/strong&gt;에는 같은 Bundle 객체가 파라미터를 통해 전달된다.&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;p&gt;Activity가 재생성 될 때 시스템이 새 인스턴스를 만드는지 혹은 기존의 인스턴스를 재사용하는지의 여부에 관계 없이 &lt;strong&gt;onCreate&lt;/strong&gt; 콜백은 실행된다. 이곳에서 파라미터로 넘어오는 &lt;strong&gt;Bundle&lt;/strong&gt; 객체는 nullable 이기 때문에 접근할 때 주의해야 한다. 예제코드는 아래와 같다.&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Always call the superclass first&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Check whether we're recreating a previously destroyed instance&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// Restore value of members from saved state&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;currentScore&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getInt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;STATE_SCORE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;currentLevel&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getInt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;STATE_LEVEL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Probably initialize members with default values for a new instance&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;만약 &lt;strong&gt;onCreate&lt;/strong&gt; 대신 &lt;strong&gt;onRestoreInstanceState&lt;/strong&gt;를 사용한다고 하면, 이 콜백은 &lt;strong&gt;onStart&lt;/strong&gt; 이후에 호출된다. 이 콜백은 onCreate와 다르게 Bundle 객체의 null 체크가 필요없다. 왜냐하면 Bundle을 통해 넘어온 객체가 있는 경우에만 &lt;strong&gt;onRestoreInstanceState&lt;/strong&gt; 콜백이 호출되기 떄문이다. 구현은 아래와 같다.&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onRestoreInstanceState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Always call the superclass so it can restore the view hierarchy&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;onRestoreInstanceState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Restore state members from saved instance&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;currentScore&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getInt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;STATE_SCORE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;currentLevel&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getInt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;STATE_LEVEL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;안드로이드 공식홈페이지 에서 말로는 Null 체크를 하지 않아도 된다고 적혀 있지만, Kotlin의 안전한 Null 처리를 이용하여 처리를 했다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;참조&quot;&gt;참조&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.android.com/guide/components/activities/activity-lifecycle#saras&quot;&gt;안드로이드 도큐먼트&lt;/a&gt;&lt;/p&gt;</content><author><name>{&quot;name&quot;=&gt;nil, &quot;avatar&quot;=&gt;nil, &quot;bio&quot;=&gt;nil, &quot;location&quot;=&gt;nil, &quot;email&quot;=&gt;nil, &quot;links&quot;=&gt;[{&quot;label&quot;=&gt;&quot;Email&quot;, &quot;icon&quot;=&gt;&quot;fas fa-fw fa-envelope-square&quot;}, {&quot;label&quot;=&gt;&quot;Website&quot;, &quot;icon&quot;=&gt;&quot;fas fa-fw fa-link&quot;}, {&quot;label&quot;=&gt;&quot;Twitter&quot;, &quot;icon&quot;=&gt;&quot;fab fa-fw fa-twitter-square&quot;}, {&quot;label&quot;=&gt;&quot;Facebook&quot;, &quot;icon&quot;=&gt;&quot;fab fa-fw fa-facebook-square&quot;}, {&quot;label&quot;=&gt;&quot;GitHub&quot;, &quot;icon&quot;=&gt;&quot;fab fa-fw fa-github&quot;}, {&quot;label&quot;=&gt;&quot;Instagram&quot;, &quot;icon&quot;=&gt;&quot;fab fa-fw fa-instagram&quot;}]}</name></author><category term="Android" /><category term="Activity" /><category term="Other" /><summary type="html">Activity ejection memory</summary></entry><entry><title type="html">Android Activity - 2</title><link href="http://localhost:4000/android/activity-lifecycle" rel="alternate" type="text/html" title="Android Activity - 2" /><published>2020-02-23T00:00:00+09:00</published><updated>2020-02-24T00:00:00+09:00</updated><id>http://localhost:4000/android/android-activity-02</id><content type="html" xml:base="http://localhost:4000/android/activity-lifecycle">&lt;h1 id=&quot;activity-lifecycle&quot;&gt;Activity Lifecycle&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;#&quot;&gt;이전 포스팅&lt;/a&gt;에서 안드로이드 Activity의 역할과 lifecycle에 대해 간단히 알아보았다. 이번 포스팅에서는 Activity lifecycle을 조금 더 자세히 알아보고자 한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;사용자가 앱(Application)을 사용, 종료, 탐색등을 할 때 Activity의 lifecycle은 각각의 상태에 맞게 전환된다. 그에 따라 개발자는 Activity의 lifecycle에 적절한 행동을 정의 해야 하고, 잘 정의하게 되면 아래와 같은 문제를 피할 수 있다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;사용자가 전화를 받거나 다른 앱으로 전환 했을 때 앱이 강제종료되는 것을 피할 수 있다.&lt;/li&gt;
  &lt;li&gt;사용자가 앱을 사용하지 않을 때, 시스템 자원을 낭비하는 것을 막을 수 있다.&lt;/li&gt;
  &lt;li&gt;사용자가 앱을 떠나 나중에 다시 돌아오게 될 때, 사용자의 현재 상태를 잃는 것을 방지할 수 있다.&lt;/li&gt;
  &lt;li&gt;사용자가 화면을 전환할 때,(가로모드, 세로모드) 사용자의 현재 상태를 잃거나, 앱이 강제종료 되는것을 방지할 수 있다.&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;Activity의 복잡성에 따라 lifecycle 메소드를 구현이 필요하거나 필요하지 않을 수 있지만, 더욱 안전한 앱을 위해 lifecycle 메소드를 이해하고 구현해보는것이 중요하다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;lifecycle의 중요 메소드는 6가지가 있다. 하나씩 살펴보자.&lt;/p&gt;

&lt;h2 id=&quot;oncreate&quot;&gt;onCreate&lt;/h2&gt;

&lt;p&gt;Activity가 생성될 때 발생하는 콜백이다. Activity가 살아있을 때 단 한번만 불려서 시작을 위한 로직 대부분을 &lt;strong&gt;onCreate&lt;/strong&gt; 에서 선언한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;파라미터로 saveInstanceState란 Bundle 객체가 넘어오는데, 이전에 저장한 상태값이 있으면 이 파라미터로 넘어오고 아니면 null이 반환된다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;간단한 구현을 보면 아래와 같다.&lt;/p&gt;
&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;lateinit&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;textView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TextView&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// some transient state for the activity instance&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;gameState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// call the super class onCreate to complete the creation of activity like&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// the view hierarchy&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// recovering the instance state&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;gameState&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;getString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;GAME_STATE_KEY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// set the user interface layout for this activity&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// the layout file is defined in the project res/layout/main_activity.xml file&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;setContentView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main_activity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// initialize member TextView so we can manipulate it later&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;textView&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;findViewById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text_view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// This callback is called only when there is a saved instance that is previously saved by using&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// onSaveInstanceState(). We restore some state in onCreate(), while we can optionally restore&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// other state here, possibly usable after onStart() has completed.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// The savedInstanceState Bundle is same as the one used in onCreate().&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onRestoreInstanceState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;textView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;getString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;TEXT_VIEW_KEY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// invoked when the activity may be temporarily destroyed, save the instance state here&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onSaveInstanceState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;outState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;outState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;putString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;GAME_STATE_KEY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gameState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;putString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;TEXT_VIEW_KEY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;textView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// call superclass to save any view hierarchy&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;onSaveInstanceState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;outState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;setContentView에 layout xml을 전달하는 대신, 새로운 View를 만들어 ViewGroup에 추가하고 ViewGroup의 root를 setContentView에 전달하는 방법을 사용할 수 있다. 자세한 내용은 &lt;a href=&quot;https://developer.android.com/guide/topics/ui&quot;&gt;여길&lt;/a&gt; 참조하자&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;onstart&quot;&gt;onStart&lt;/h2&gt;

&lt;p&gt;Activity가 시작 상태로 진입했을 때 발생하는 콜백이다. &lt;strong&gt;onStart&lt;/strong&gt; 콜백이 발생했을 때는 해당 Activity가 사용자에게 보여진다는 것을 의미한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;onStart 콜백은 매우 빠르게 완료되고 바로 다음 상태인 onResume 상태로 넘어간다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;onresume&quot;&gt;onResume&lt;/h2&gt;

&lt;p&gt;Activity가 재개 상태로 진입했을 때 발생하는 콜백이다. &lt;strong&gt;onResume&lt;/strong&gt; 콜백이 불린다는 것은 해당 Activity가 Foreground에 진입했다는 것이고, 사용자와 상호작용을 할 수 있다는 것을 의미한다. 다른 상태전환(Activity 이동 또는 종료)이 일어나기 전까지 해당 Activity는 이 상태를 유지한다.&lt;/p&gt;

&lt;h2 id=&quot;onpause&quot;&gt;onPause&lt;/h2&gt;

&lt;p&gt;사용자가 Activity에서 떠날때 가장 먼저 발생하는 콜백이 &lt;strong&gt;onPause&lt;/strong&gt; 이다. Activity가 Pause 상태로 진입하여 Activity가 더이상 Foreground에 있지 않다는걸 의미한다.&lt;/p&gt;

&lt;p&gt;onPause의 경우 매우 짧은 시간안에 끝나기 때문에 저장 작업 같은 긴 작업을 하기에 적합하지 않다. 이말은 즉 저장작업, 네트워크 작업 등을 onPause에서 하지 말라는 의미이다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;onPause에서 위와 같은 작업을 실행하게 되면, onPause 메소드가 끝날 때 까지 해당 작업이 완료되지 않을 수 있다. 이러한 무거운 작업은 onStop 에서 해야한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;onPause 작업이 완료되면 Activity가 일시정지 상태를 벗어났다는 의미이다. 그리고 Activity가 일시정지 상태를 벗어나면, 다시 재개되거나, 사용자에게 아얘 안보인다는 것이고, 만약 Activity 가 재개됐다면 &lt;strong&gt;onResume&lt;/strong&gt; 콜백이 다시 호출되게 된다. onResume 콜백이 불리게 된 상황에서는 Activity 인스턴스가 메모리에 계속 거주하게 된다. 이 시나리오 대로라면 Activity는 다른 라이프사이클 콜백에서 초기화 작업을 수행하지 않아도 되며, 종료 시나리오를 타는 경우 사용자에게 아얘 안보이게 되고 &lt;strong&gt;onStop&lt;/strong&gt; 콜백이 실행되게 된다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;onstop&quot;&gt;onStop&lt;/h2&gt;

&lt;p&gt;Activity가 사용자에게 더이상 보이지 않을 때 정지 상태에 돌입한다. 그리고 그 즉시 시스템은 &lt;strong&gt;onStop&lt;/strong&gt; 콜백을 호출하게 된다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;onStop&lt;/strong&gt;이 불리게 될때 새로운 Activity가 실행되어 기존 Activity를 가리거나, 기존 Activity가 종료 로직을 수행하게 된다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;일시정지 애니메이션이나 세밀한 위치정보 업데이트 같은, 불필요하거나 조정해야 하는 리소스는 onStop에서 수행해야 한다. 또한 데이터베이스에 데이터 저장 같은 CPU를 사용하는 작업은 적당한 수행장소를 찾지 못했을 경우 onStop에서 수행해야 한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Activity가 정지 상태일 때 &lt;strong&gt;Window Manager를 제외한&lt;/strong&gt; 모든 상태와 정보를 가지고 메모리에 계속 거주하고 있게 된다.(Activity가 재개될 때 Window Manager에 필요한 정보를 다시 호출한다.) &lt;strong&gt;onPause&lt;/strong&gt; 콜백과 같이 재개됐을 때는 다른 라이프사이클 콜백에서 초기화 작업을 수행하지 않아도 되며, onStop에서 정리한 리소스들을 onStart에서 적절히 재수행 시켜주기만 하면 된다. 재수행 될 경우 onRestart 콜백이 불리게 되고, 종료 프로세스를 수행하는 경우 onDestroy 콜백이 불리게 된다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;ondestroy&quot;&gt;onDestroy&lt;/h2&gt;

&lt;p&gt;Activity가 종료되기 전에 호출되는 콜백이다. 아래와 같은 상황에 수행된다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;유저가 종료하거나, finish() 함수가 불리는 경우&lt;/li&gt;
  &lt;li&gt;Configuration change 가 일어나는 경우&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Activity의 종료 이유를 찾기 보단, &lt;strong&gt;ViewModel을 이용&lt;/strong&gt;하여 View의 데이터를 적절히 가지고 있어야 한다. Configuration Change가 일어나 해당 Activity 파괴되고 다시 생성되는 경우에도 ViewModel은 다시 생성되는 Activity 인스턴스에 제공되므로 아무것도 수행하지 않아도 된다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Activity가 재생성되지 않고 파괴되는 경우 ViewModel은 &lt;strong&gt;onCleared&lt;/strong&gt; 함수가 호출 된다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;onDestroy 콜백에서 해당 Activity에서 사용하는 resource들을 최대한 해제시켜야 한다.&lt;/p&gt;

&lt;h2 id=&quot;참조&quot;&gt;참조&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.android.com/guide/components/activities/activity-lifecycle&quot;&gt;안드로이드 도큐먼트&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>{&quot;name&quot;=&gt;nil, &quot;avatar&quot;=&gt;nil, &quot;bio&quot;=&gt;nil, &quot;location&quot;=&gt;nil, &quot;email&quot;=&gt;nil, &quot;links&quot;=&gt;[{&quot;label&quot;=&gt;&quot;Email&quot;, &quot;icon&quot;=&gt;&quot;fas fa-fw fa-envelope-square&quot;}, {&quot;label&quot;=&gt;&quot;Website&quot;, &quot;icon&quot;=&gt;&quot;fas fa-fw fa-link&quot;}, {&quot;label&quot;=&gt;&quot;Twitter&quot;, &quot;icon&quot;=&gt;&quot;fab fa-fw fa-twitter-square&quot;}, {&quot;label&quot;=&gt;&quot;Facebook&quot;, &quot;icon&quot;=&gt;&quot;fab fa-fw fa-facebook-square&quot;}, {&quot;label&quot;=&gt;&quot;GitHub&quot;, &quot;icon&quot;=&gt;&quot;fab fa-fw fa-github&quot;}, {&quot;label&quot;=&gt;&quot;Instagram&quot;, &quot;icon&quot;=&gt;&quot;fab fa-fw fa-instagram&quot;}]}</name></author><category term="Android" /><category term="Activity" /><category term="Activity Lifecycle" /><summary type="html">Activity Lifecycle</summary></entry><entry><title type="html">Android Activity - 1</title><link href="http://localhost:4000/android/activity" rel="alternate" type="text/html" title="Android Activity - 1" /><published>2020-02-20T00:00:00+09:00</published><updated>2020-02-23T00:00:00+09:00</updated><id>http://localhost:4000/android/android-activity-01</id><content type="html" xml:base="http://localhost:4000/android/activity">&lt;h1 id=&quot;activity&quot;&gt;Activity&lt;/h1&gt;

&lt;p&gt;Activity는 한 Application에서 다른 Application의 Activity를 호출하면 &lt;b&gt;호출된&lt;/b&gt; Application Activity를 &lt;b&gt;호출한&lt;/b&gt; Application의 Acitivty처럼 사용할 수 있는 패러다임을 중심으로 만들어졌다. 이렇게 Activity는 사용자의 상호작용을 중심으로 여러 진입지점을 제공한다.&lt;/p&gt;

&lt;p&gt;또한, Activity는 화면(Screen)보다 작거나, 다른 Window위에 나타날 수 있는 Window를 제공하고 있으며, 이 Window는 User Interface를 그려 화면을 채운다.&lt;/p&gt;

&lt;p&gt;이처럼 Activity는 Android Component중 가장 중요한 역할을 맡고 있다. Activity를 관리하려면 Manifest에 등록해야 하며, Lifecycle과 &lt;a href=&quot;https://gyooha.github.io/seroo/android/backstack&quot;&gt;Backstack&lt;/a&gt;을 적절하게 관리해야 한다.&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;manifest&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;application&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;activity&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;android:name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;.ExampleActivity&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      ...
  &lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;/application ... &amp;gt;
  ...
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/manifest &amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;매니페스트(Manifest)에 위와 &lt;application&gt; 안에 &lt;activity&gt; 태그를 이용하여 등록이 가능하다.&lt;/activity&gt;&lt;/application&gt;&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;activity&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;android:name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;.ExampleActivity&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;android:icon=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@drawable/app_icon&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;intent-filter&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;action&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;android:name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;android.intent.action.SEND&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;category&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;android:name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;android.intent.category.DEFAULT&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;data&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;android:mimeType=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/plain&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/intent-filter&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/activity&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같이 intent-filter 설정도 가능하다. 자세한 내용은 다음 Intent component 시간에 하도록 하겠다.&lt;/p&gt;

&lt;h2 id=&quot;activity-lifecycle&quot;&gt;Activity Lifecycle&lt;/h2&gt;

&lt;h3 id=&quot;oncreate&quot;&gt;onCreate&lt;/h3&gt;

&lt;p&gt;Activity가 생성되면 가장 먼저 불리게 되는 콜백함수 이다. 그래서 가장 먼저 구현해야 하며, setContentView 메소드를 이용하여 layout을 정의해야 하고, list 등의 데이터를 View에 bind 시켜줘야 한다. onCreate 다음 콜백은 항상 onStart 이다.&lt;/p&gt;

&lt;h3 id=&quot;onstart&quot;&gt;onStart&lt;/h3&gt;

&lt;p&gt;onStart 콜백은 Activity가 시작 상태에 들어와있다는 뜻이다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;시작상태란? - Activity가 Foreground에 와서 사용자와 상호작용할 준비가 완료 됐다는 의미 이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;onresume&quot;&gt;onResume&lt;/h3&gt;

&lt;p&gt;onResume 콜백이 시작되면 해당 Activity가 Activity Stack의 Top에 와있다는 것이며, 사용자와 상호작용을 시작했다는 뜻이다.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;onPause 콜백은 항상 onResume 다음에 불린다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;onpause&quot;&gt;onPause&lt;/h3&gt;

&lt;p&gt;onPause 콜백이 시작되면 해당 Activity가 포커스를 잃고 Pause 상태에 들어갔다는 의미이다.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;onPause 콜백이 호출되면 Activity는 부분적으로 보일순 있지만, 그러나 대부분 해당 Activity 떠난다는 의미이며, 다음콜백(onResume, onStop)을 호출하게 된다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;주의사항 - onPause에서는 user data를 저장하거나, Network Call을 하거나, database transaction 작업을 하지 않는것을 권장한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;onstop&quot;&gt;onStop&lt;/h3&gt;

&lt;p&gt;onStop 콜백이 시작되면 해당 Activity의 UI가 더이상 사용자에게 보이지 않는다는 것을 의미한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;대부분 이전 Activity는 파괴되고, 새로운 Activity는 생성중 이거나, 존재하는 Activity가 Resume 상태로 돌입하여 Stop된 Activity를 덮는 행동을 한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;onrestart&quot;&gt;onRestart&lt;/h3&gt;

&lt;p&gt;onRestart 콜백은 Activity가 Stop 상태에서 다시 재시작 될 때 호출된다. Activity가 중지될 때의 상태를 복원한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;다음 콜백은 항상 onStart 이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;ondestroy&quot;&gt;onDestroy&lt;/h3&gt;
&lt;p&gt;onDestroy 콜백은 Activity가 마지막 한번만 받게 된다.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;onDestroy에서는 Activity 또는 Activity를 포함하는 프로세스가 파괴될 때 resource를 해제하기 위해 구현된다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;참조&quot;&gt;참조&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.android.com/reference/android/app/Activity&quot;&gt;Activity document&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.android.com/guide/components/activities/intro-activities&quot;&gt;Activity guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>{&quot;name&quot;=&gt;nil, &quot;avatar&quot;=&gt;nil, &quot;bio&quot;=&gt;nil, &quot;location&quot;=&gt;nil, &quot;email&quot;=&gt;nil, &quot;links&quot;=&gt;[{&quot;label&quot;=&gt;&quot;Email&quot;, &quot;icon&quot;=&gt;&quot;fas fa-fw fa-envelope-square&quot;}, {&quot;label&quot;=&gt;&quot;Website&quot;, &quot;icon&quot;=&gt;&quot;fas fa-fw fa-link&quot;}, {&quot;label&quot;=&gt;&quot;Twitter&quot;, &quot;icon&quot;=&gt;&quot;fab fa-fw fa-twitter-square&quot;}, {&quot;label&quot;=&gt;&quot;Facebook&quot;, &quot;icon&quot;=&gt;&quot;fab fa-fw fa-facebook-square&quot;}, {&quot;label&quot;=&gt;&quot;GitHub&quot;, &quot;icon&quot;=&gt;&quot;fab fa-fw fa-github&quot;}, {&quot;label&quot;=&gt;&quot;Instagram&quot;, &quot;icon&quot;=&gt;&quot;fab fa-fw fa-instagram&quot;}]}</name></author><category term="Android" /><category term="Activity" /><summary type="html">Activity</summary></entry><entry><title type="html">자료구조 - 그래프</title><link href="http://localhost:4000/datastructure/graph" rel="alternate" type="text/html" title="자료구조 - 그래프" /><published>2020-02-14T00:00:00+09:00</published><updated>2020-02-14T00:00:00+09:00</updated><id>http://localhost:4000/datastructure/graph</id><content type="html" xml:base="http://localhost:4000/datastructure/graph">&lt;h1 id=&quot;그래프graph&quot;&gt;그래프(Graph)&lt;/h1&gt;

&lt;p&gt;그래프는 단순히 노드와 노드 사이를 연결한 것을 하나로 모아 놓은 것과 같다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;이전에 포스팅한 트리도 그래프의 한 종류이다. 하지만 그렇다고 모든 그래프가 트리인 것은 아니다. 간단히 말해서 트리는 사이클이 없는 하나의 연결 그래프이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;그래프의-특징&quot;&gt;그래프의 특징&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;그래프는 방향성이 있을 수도 있고 없을 수도 있다.&lt;/li&gt;
  &lt;li&gt;그래프는 여러 개의 고립된 부분 그래프(isolated subgraphs)로 구성될 수 있다. 모든 정점 쌍 간에 경로가 존재하는 그래프는 “연결 그래프” 라고 부른다.&lt;/li&gt;
  &lt;li&gt;그래프는 사이클이 존재할 수도 있고, 존재하지 않을 수도 있다. 사이클이 없는 그래프는 “비순환 그래프(acycle graph)” 라고 부른다.&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;half full&quot;&gt;
  
    
      &lt;a href=&quot;/assets/images/posts/image_graph_01.png&quot; title=&quot;그래프 예제1&quot;&gt;
        &lt;img src=&quot;/assets/images/posts/image_graph_01.png&quot; alt=&quot;그래프&quot; /&gt;
      &lt;/a&gt;
    
  
    
      &lt;a href=&quot;/assets/images/posts/image_graph_02.png&quot; title=&quot;그래프 예제2&quot;&gt;
        &lt;img src=&quot;/assets/images/posts/image_graph_02.png&quot; alt=&quot;그래프&quot; /&gt;
      &lt;/a&gt;
    
  
  
    &lt;figcaption&gt;
&lt;/figcaption&gt;
  
&lt;/figure&gt;

&lt;p&gt;프로그래밍 관점에서 그래프를 표현할 때는 일반적으로 다음 두 가지 방법을 사용한다.&lt;/p&gt;

&lt;h2 id=&quot;인접-리스트adjacency-list&quot;&gt;인접 리스트(adjacency list)&lt;/h2&gt;

&lt;p&gt;인접 리스트는 그래프를 표현할 때 사용되는 가장 일반적인 방법이다. 모든 노드를 인접 리스트에 저장한다. 무방향 그래프에서 a, b 간선은 두 번 저장 된다. 한 번은 a 노드에 인접한 간선을 저장하고 다른 한번은 b에 인접한 간선을 저장한다.&lt;/p&gt;

&lt;p&gt;간단하게 구현하면 아래와 같다.&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Graph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MutableList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;data class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MutableList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;트리에서는 루트 노드에서 모든 노드를 접근할 수 있기 때문에, 트리 클래스를 따로 두지 않아도 됬었다. 하지만 그래프에서는 하나의 노드에서 모든 노드로 접근할 수 없기 때문에 Graph 클래스가 필요하다.&lt;/p&gt;

&lt;p&gt;그래프를 표현하기 위한 추가적인 클래스를 따로 만들 필요는 없다. 배열 혹은 해시테이블과 해당 자료구조의 인덱스마다 존재하는 또 다른 리스트(배열, 가변리스트, 연결리스트)를 이용해서 인접 리스트를 표현할 수 있다.&lt;/p&gt;

&lt;p&gt;위의 그림과 같은 그래프는 다음과 같이 표현할 수 있다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0: 1
1: 2
2: 0, 3
3: 2

4: 6
5: 4
6: 5
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;인접-행렬&quot;&gt;인접 행렬&lt;/h2&gt;

&lt;p&gt;인접 행렬은 NXN Boolean 행렬로써 matrix[i][j]가 true라면 i에서 j로의 간선이 있다는 뜻이다. 0과 1을 이용한 정수 행렬을 사용할 수도 있다. 여기서 N은 노드의 개수를 의미한다.&lt;/p&gt;

&lt;p&gt;무방향 그래프를 인접 행렬로 표현한다면 이 행렬은 대칭행렬이 된다. 방향 그래프에서는 대칭행렬이 안 될 수도 있다.&lt;/p&gt;

&lt;figure class=&quot;half full&quot;&gt;
  
    
      &lt;a href=&quot;/assets/images/posts/image_graph_02.png&quot; title=&quot;그래프&quot;&gt;
        &lt;img src=&quot;/assets/images/posts/image_graph_02.png&quot; alt=&quot;그래프&quot; /&gt;
      &lt;/a&gt;
    
  
    
      &lt;a href=&quot;/assets/images/posts/image_matrix.png&quot; title=&quot;인접행렬&quot;&gt;
        &lt;img src=&quot;/assets/images/posts/image_matrix.png&quot; alt=&quot;인접행렬&quot; /&gt;
      &lt;/a&gt;
    
  
  
    &lt;figcaption&gt;
&lt;/figcaption&gt;
  
&lt;/figure&gt;

&lt;h3 id=&quot;주의&quot;&gt;주의&lt;/h3&gt;

&lt;p&gt;인접 리스트를 사용한 그래프 알고리즘들, 예를 들어 너비 우선 탐색 또한 인접 행렬에서 사용 가능하지만 효율성이 떨어진다. 인접 리스트에서는 어떤 노드에 인접한 노드를 쉽게 찾을 수 있지만, 모든 노드를 순회해야 알 수 있기 때문이다.&lt;/p&gt;

&lt;h2 id=&quot;그래프-탐색&quot;&gt;그래프 탐색&lt;/h2&gt;

&lt;p&gt;그래프를 탐색하는 방법은 두 가지로 깊이 우선 탐색(DFS: depth-first search), 너비 우선 탐색이(BFS: breadth-first search) 있다.&lt;/p&gt;

&lt;h3 id=&quot;깊이-우선-탐색depth-first-search&quot;&gt;깊이 우선 탐색(Depth first search)&lt;/h3&gt;

&lt;p&gt;깊이 우선 탐색은 임의의 노드(루트 노드)로 시작해서 인접 노드를 순회하기 전에, 방문한 노드가 가르키는 노드들을 먼저 순회하고 주변 노드들을 순회하는 방식이다. 한마디로 깊게(Deep) 순회를 시작한다.&lt;/p&gt;

&lt;h4 id=&quot;구현&quot;&gt;구현&lt;/h4&gt;

&lt;p&gt;전위순회를 포함한 다른 형태의 트리 순회는 모두 DFS의 한 종류이다. 이 알고리즘을 구현할 때 가장 큰 차이점은, 그래프 탐색의 경우 어떤 노드를 방문했었는지 체크해야 한다는 것이다. 체크하지 않는 경우 &lt;b&gt;무한루프&lt;/b&gt;에 빠지게 될 가능성이 높다.&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
        &lt;span class=&quot;nf&quot;&gt;visit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;visited&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;forEach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;visited&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nf&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;너비-우선-탐색breadth-first-search&quot;&gt;너비 우선 탐색(Breadth first search)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;특정 두 노드 사이의 최단 경로 혹은 임의의 경로를 찾고 싶을 때는 BFS가 일반적으로 더 낫다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;너비 우선 탐색은 임의의 노드(루트 노드)로 시작해서 인접 노드를 순회하면서 점점 깊게 들어간다. 한마디로 넓게(wide) 탐색한다는 말이다.&lt;/p&gt;

&lt;h4 id=&quot;구현-1&quot;&gt;구현&lt;/h4&gt;

&lt;p&gt;너비 우선 탐색은 일단 재귀적으로 동작하지 않는다. 큐를 사용해 루프 형태로 구현하는 것이 가장 잘 동작한다.&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;queue&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;visited&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;enqueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dequeue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;visit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;forEach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;visited&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;visited&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;enqueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;양방향-탐색&quot;&gt;양방향 탐색&lt;/h2&gt;

&lt;p&gt;양방향 탐색은 출발지와 도착지 사이에 최단 경로를 찾을 때 사용되곤 한다. 기본적으로 출발지와 도착지 두 노드에서 동시에 너비 우선 탐색을 수행한 뒤, 두 탐색 지점이 충돌하는 경우에 경로를 찾는 방식이다.&lt;/p&gt;

&lt;h2 id=&quot;그래프-구현&quot;&gt;그래프 구현&lt;/h2&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;data class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Graph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MutableList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;GraphNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;depthFirstSearch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GraphNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;visit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;depth : $it&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isVisited&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;forEach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isVisited&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;depthFirstSearch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;breathFirstSearch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GraphNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;queue&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;GraphNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isVisited&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;enqueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dequeue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;visit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;breath : $it&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;forEach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isVisited&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isVisited&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;enqueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;visit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;graphNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GraphNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;GraphNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Unit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;graphNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;data class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GraphNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MutableList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;GraphNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mutableListOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;isVisited&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>{&quot;name&quot;=&gt;nil, &quot;avatar&quot;=&gt;nil, &quot;bio&quot;=&gt;nil, &quot;location&quot;=&gt;nil, &quot;email&quot;=&gt;nil, &quot;links&quot;=&gt;[{&quot;label&quot;=&gt;&quot;Email&quot;, &quot;icon&quot;=&gt;&quot;fas fa-fw fa-envelope-square&quot;}, {&quot;label&quot;=&gt;&quot;Website&quot;, &quot;icon&quot;=&gt;&quot;fas fa-fw fa-link&quot;}, {&quot;label&quot;=&gt;&quot;Twitter&quot;, &quot;icon&quot;=&gt;&quot;fab fa-fw fa-twitter-square&quot;}, {&quot;label&quot;=&gt;&quot;Facebook&quot;, &quot;icon&quot;=&gt;&quot;fab fa-fw fa-facebook-square&quot;}, {&quot;label&quot;=&gt;&quot;GitHub&quot;, &quot;icon&quot;=&gt;&quot;fab fa-fw fa-github&quot;}, {&quot;label&quot;=&gt;&quot;Instagram&quot;, &quot;icon&quot;=&gt;&quot;fab fa-fw fa-instagram&quot;}]}</name></author><category term="Datastructure" /><category term="Graph" /><summary type="html">그래프(Graph)</summary></entry><entry><title type="html">자료구조 - 트리(2)</title><link href="http://localhost:4000/datastructure/tree02" rel="alternate" type="text/html" title="자료구조 - 트리(2)" /><published>2020-02-10T00:00:00+09:00</published><updated>2020-02-10T00:00:00+09:00</updated><id>http://localhost:4000/datastructure/tree02</id><content type="html" xml:base="http://localhost:4000/datastructure/tree02">&lt;h1 id=&quot;이진-트리-순회&quot;&gt;이진 트리 순회&lt;/h1&gt;

&lt;p&gt;트리는 아래와 같은 순회 방식이 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;전위(pre-order)&lt;/li&gt;
  &lt;li&gt;중위(in-order)&lt;/li&gt;
  &lt;li&gt;후위(post-order)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;중위-순회in-order&quot;&gt;중위 순회(in order)&lt;/h2&gt;

&lt;p&gt;중위 순회(in order traversal)는 왼쪽 노드, 현재 노드, 오른쪽 노드 순서로 노드를 방문하는 방법을 말한다.&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;inOrderTraversal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TreeNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;inOrderTraversal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;visit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;inOrderTraversal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;중위 순회 방식으로 트리를 순회하게 되면 오름차순으로 방문하게 된다.&lt;/p&gt;

&lt;h2 id=&quot;전위-순회pre-order&quot;&gt;전위 순회(pre order)&lt;/h2&gt;

&lt;p&gt;전위 순회(pre order traversal)는 자식 노드보다 현재 노드를 먼저 방문하는 방법을 말한다.&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;inOrderTraversal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TreeNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;visit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;inOrderTraversal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;inOrderTraversal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;전위 순회에서 가장 먼저 방문하게 될 노드는 언제나 루트 노드이다.&lt;/p&gt;

&lt;h2 id=&quot;후위-순회post-order&quot;&gt;후위 순회(post order)&lt;/h2&gt;

&lt;p&gt;후위 순회(post order traversal)는 모든 자식노드를 방문한 뒤 현재 노드를 방문하는 방법을 말한다.&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;inOrderTraversal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TreeNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;inOrderTraversal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;inOrderTraversal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;visit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;후위 순회에서 가장 마지막에 방문하게 될 노드는 언제나 루트 노드이다.&lt;/p&gt;

&lt;h2 id=&quot;이진-힙최소힙과-최대힙&quot;&gt;이진 힙(최소힙과 최대힙)&lt;/h2&gt;

&lt;p&gt;최소힙은 트리의 마지막 단계에서 오른쪽 부분을 뺀 나머지 부분이 가득 채워져 있다는 부분에서 &lt;strong&gt;완전 이진트리&lt;/strong&gt;이며, 각 노드의 값이 자식들의 원소보다 작다는 특성이 있다. 따라서 루트는 트리의 전체에서 가장 작은 노드가 된다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;최대 힙은 값이 내림차순으로 정렬되어 있다는 점만 다를 뿐, 최소힙과 완전히 같다.&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;half full&quot;&gt;
  
    
      &lt;a href=&quot;/assets/images/posts/image_min_heaps.png&quot; title=&quot;최소힙&quot;&gt;
        &lt;img src=&quot;/assets/images/posts/image_min_heaps.png&quot; alt=&quot;Min heaps&quot; /&gt;
      &lt;/a&gt;
    
  
    
      &lt;a href=&quot;/assets/images/posts/image_max_heaps.png&quot; title=&quot;최대힙&quot;&gt;
        &lt;img src=&quot;/assets/images/posts/image_max_heaps.png&quot; alt=&quot;Max heaps&quot; /&gt;
      &lt;/a&gt;
    
  
  
    &lt;figcaption&gt;
&lt;/figcaption&gt;
  
&lt;/figure&gt;

&lt;h2 id=&quot;삽입&quot;&gt;삽입&lt;/h2&gt;

&lt;p&gt;&lt;b&gt;최소힙&lt;/b&gt;에 원소를 삽일할 때는 언제나 트리의 밑바닥에서 부터 삽입을 시작한다. 완전 트리의 속성에 위배되지 않게 새로운 원소는 밑바닥 가장 오른쪽 위치로 삽입 된다. 그 다음 새로 삽입된 원소가 제대로 된 자리를 찾을 때 까지 부모 노드와 교환해 나간다.&lt;/p&gt;

&lt;figure class=&quot;third full&quot;&gt;
  
    
      &lt;a href=&quot;/assets/images/posts/image_insert_1.png&quot; title=&quot;전 이진 트리가 아님&quot;&gt;
        &lt;img src=&quot;/assets/images/posts/image_insert_1.png&quot; alt=&quot;1&quot; /&gt;
      &lt;/a&gt;
    
  
    
      &lt;a href=&quot;/assets/images/posts/image_insert_2.png&quot; title=&quot;2와 7을 교환&quot;&gt;
        &lt;img src=&quot;/assets/images/posts/image_insert_2.png&quot; alt=&quot;2&quot; /&gt;
      &lt;/a&gt;
    
  
    
      &lt;a href=&quot;/assets/images/posts/image_insert_3.png&quot; title=&quot;2와 4를 교환&quot;&gt;
        &lt;img src=&quot;/assets/images/posts/image_insert_3.png&quot; alt=&quot;3&quot; /&gt;
      &lt;/a&gt;
    
  
  
    &lt;figcaption&gt;
&lt;/figcaption&gt;
  
&lt;/figure&gt;

&lt;h2 id=&quot;최소-원소-뽑아내기&quot;&gt;최소 원소 뽑아내기&lt;/h2&gt;

&lt;p&gt;최소힙에서 최소 원소를 찾기란 쉬운 일이다. 최소 원소는 언제나 가장 위에 놓인다. 사실 이 최솟값을 어떻게 힙에서 제거하냐가 까다로운 부분이다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;최소 원소를 제거한 후에 힙에 있는 가장 마지막 원소와 교환 한다.&lt;/li&gt;
  &lt;li&gt;최소힙의 성질에 만족하도록, 해당 노드를 자식 노드와 교환해 나감으로써 밑으로 보낸다.&lt;/li&gt;
  &lt;li&gt;왼쪽 노드와 오른쪽 노드를 비교해 더 작은 노드와 교환한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;third full&quot;&gt;
  
    
      &lt;a href=&quot;/assets/images/posts/image_pop_1.png&quot; title=&quot;루트를 80으로 교체&quot;&gt;
        &lt;img src=&quot;/assets/images/posts/image_pop_1.png&quot; alt=&quot;1&quot; /&gt;
      &lt;/a&gt;
    
  
    
      &lt;a href=&quot;/assets/images/posts/image_pop_2.png&quot; title=&quot;23과 80을 교환&quot;&gt;
        &lt;img src=&quot;/assets/images/posts/image_pop_2.png&quot; alt=&quot;2&quot; /&gt;
      &lt;/a&gt;
    
  
    
      &lt;a href=&quot;/assets/images/posts/image_pop_3.png&quot; title=&quot;32와 80을 교환&quot;&gt;
        &lt;img src=&quot;/assets/images/posts/image_pop_3.png&quot; alt=&quot;3&quot; /&gt;
      &lt;/a&gt;
    
  
  
    &lt;figcaption&gt;
&lt;/figcaption&gt;
  
&lt;/figure&gt;

&lt;h2 id=&quot;트리-구현&quot;&gt;트리 구현&lt;/h2&gt;

&lt;h3 id=&quot;이진-탐색-트리&quot;&gt;이진 탐색 트리&lt;/h3&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;data class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TreeNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TreeNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TreeNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;inOrderTraversal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TreeNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actualNode&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;inOrderTraversal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;actualNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;visit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;actualNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;inOrder : $it&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;inOrderTraversal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;actualNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;preOrderTraversal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TreeNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actualNode&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;visit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;actualNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;preOrder : $it&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;preOrderTraversal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;actualNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;preOrderTraversal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;actualNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;postOrderTraversal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TreeNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actualNode&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;postOrderTraversal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;actualNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;postOrderTraversal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;actualNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;visit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;actualNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;postOrder : $it&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TreeNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TreeNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;visit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TreeNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;TreeNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Unit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>{&quot;name&quot;=&gt;nil, &quot;avatar&quot;=&gt;nil, &quot;bio&quot;=&gt;nil, &quot;location&quot;=&gt;nil, &quot;email&quot;=&gt;nil, &quot;links&quot;=&gt;[{&quot;label&quot;=&gt;&quot;Email&quot;, &quot;icon&quot;=&gt;&quot;fas fa-fw fa-envelope-square&quot;}, {&quot;label&quot;=&gt;&quot;Website&quot;, &quot;icon&quot;=&gt;&quot;fas fa-fw fa-link&quot;}, {&quot;label&quot;=&gt;&quot;Twitter&quot;, &quot;icon&quot;=&gt;&quot;fab fa-fw fa-twitter-square&quot;}, {&quot;label&quot;=&gt;&quot;Facebook&quot;, &quot;icon&quot;=&gt;&quot;fab fa-fw fa-facebook-square&quot;}, {&quot;label&quot;=&gt;&quot;GitHub&quot;, &quot;icon&quot;=&gt;&quot;fab fa-fw fa-github&quot;}, {&quot;label&quot;=&gt;&quot;Instagram&quot;, &quot;icon&quot;=&gt;&quot;fab fa-fw fa-instagram&quot;}]}</name></author><category term="Datastructure" /><category term="Tree" /><summary type="html">이진 트리 순회</summary></entry><entry><title type="html">자료구조 - 트리(1)</title><link href="http://localhost:4000/datastructure/tree01" rel="alternate" type="text/html" title="자료구조 - 트리(1)" /><published>2020-02-10T00:00:00+09:00</published><updated>2020-02-10T00:00:00+09:00</updated><id>http://localhost:4000/datastructure/tree01</id><content type="html" xml:base="http://localhost:4000/datastructure/tree01">&lt;h1 id=&quot;트리tree&quot;&gt;트리(Tree)&lt;/h1&gt;

&lt;p&gt;트리는 그래프의 일종으로, 노드로 이루어진 자료구조 이다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;트리는 하나의 루트 노드를 갖는다. (사실 그래프 이론상 꼭 하나의 노드일 필요는 없지만, 대부분 사용하는 트리에서는 맞는 말이다.)&lt;/li&gt;
  &lt;li&gt;루트 노드는 0개 이상의 자식 노드를 가지고 있다.&lt;/li&gt;
  &lt;li&gt;그 자식 노드는 또 0개 이상의 자식 노드를 가지고 있고, 이는 계속 반복적으로 정의 된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;트리는 &lt;b&gt;사이클&lt;/b&gt;이 존재할 수 &lt;b&gt;없다&lt;/b&gt;. 노드들은 &lt;b&gt;특정 순서&lt;/b&gt;로 &lt;b&gt;나열될 수도 있고&lt;/b&gt; 그럴 수 &lt;b&gt;없을 수도&lt;/b&gt; 있다. 각 노드는 어떤 자료형으로도 표현 가능하다. 각 노드는 &lt;b&gt;부모 노드&lt;/b&gt;로의 연결이 &lt;b&gt;있을 수도&lt;/b&gt; 있고 &lt;b&gt;없을 수도&lt;/b&gt; 있다.&lt;/p&gt;

&lt;p&gt;노드 클래스를 아주 간단하게 정의하면 다음과 같다.&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;data class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TreeNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;nodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MutableList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Tree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TreeNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;트리 및 그래프는 대부분 세부사항이 모호하거나 가정 자체가 틀린 경우가 많으니 여러 이슈들에 대해 유의하자.&lt;/p&gt;

&lt;h2 id=&quot;트리의-종류&quot;&gt;트리의 종류&lt;/h2&gt;

&lt;p&gt;이진 트리는 각 노드가 최대 두 개의 자식을 갖는 트리를 말한다. 모든 트리가 이진트리는 아니며, 삼진 트리, 사진 트리 등등 여러 종류의 트리들이 있다. 아래와 같은 트리는 이진트리가 아니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/posts/image_three_tree.png&quot; alt=&quot;imageHashTable&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;이진트리binary-tree와-이진탐색트리binary-search-tree&quot;&gt;이진트리(binary tree)와 이진탐색트리(binary search tree)&lt;/h2&gt;

&lt;p&gt;이진탐색트리는 다음과 같은 특정 순서를 따르는 속성이 있는 이진 트리를 말한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;모든 왼쪽 자식들 &amp;lt;= n &amp;lt; 모든 오른쪽 자식들 속성은 모든 노드 n에 대해 반드시 참이어야 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;이진탐색트리&quot;&gt;이진탐색트리&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/posts/image_binary_search_tree.png&quot; alt=&quot;imageHashTable&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;이진탐색트리가-아님&quot;&gt;이진탐색트리가 아님&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/posts/image_not_binary_search_tree.png&quot; alt=&quot;imageHashTable&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위의 트리는 이진탐색트리가 될 수 없다. 왜냐하면 8보다 큰 값이 왼쪽 노드에 속해있기 때문이다.&lt;/p&gt;

&lt;h2 id=&quot;트리의-균형-비균형&quot;&gt;트리의 균형 비균형&lt;/h2&gt;

&lt;p&gt;많은 트리가 균형이 잡혀있긴 하지만, 모든 트리가 균형이 잡혀있는것은 아니다. 여기서 균형을 잡는다는 의미는 왼쪽과 오른쪽 부분 트리의 크기가 완전히 같게 하는 것을 의미하지 않는다.&lt;/p&gt;

&lt;p&gt;균형 트리인지 확인하는 방법 중 하나는 “너무 불균형한건 아닌지” 확인하는 것 이상의 의미를 갖는다. O(log N) 시간에 insert와 find를 할 수 있을 정도로 균형이 잘 잡혀 있기만 하면 된다. 꼭 완벽하게 균형 잡혀 있을 필요는 없다.&lt;/p&gt;

&lt;h4 id=&quot;완전-이진-트리complete-binary-tree&quot;&gt;완전 이진 트리(complete binary tree)&lt;/h4&gt;

&lt;p&gt;완전 이진 트리는 트리의 모든 높이에서 노드가 꽉 차 있는 이진 트리를 말한다. 마지막 단계는 꽉 차 있지 않아도 되지만 노드가 왼쪽에서 오른쪽으로 채워져야 한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/posts/image_complete_binary_tree.png&quot; alt=&quot;imageHashTable&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;완전-이진-트리가-아님&quot;&gt;완전 이진 트리가 아님&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/posts/image_not_complete_binary_tree.png&quot; alt=&quot;imageHashTable&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;전-이진-트리full-binary-tree&quot;&gt;전 이진 트리(full binary tree)&lt;/h4&gt;

&lt;p&gt;전 이진 트리는 모든 노드의 자식이 없거나 정확히 두 개 있는 경우를 말한다. 즉, 자식이 하나만 있는 노드가 존재해서는 안 된다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/posts/image_full_binary_tree.png&quot; alt=&quot;imageHashTable&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;전-이진-트리가-아님&quot;&gt;전 이진 트리가 아님&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/posts/image_not_full_binary_tree.png&quot; alt=&quot;imageHashTable&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;포화-이진-트리perfect-binary-tree&quot;&gt;포화 이진 트리(perfect binary tree)&lt;/h4&gt;

&lt;p&gt;포화 이진 트리는 전 이진 트리이면서 완전 이진 트리인 경우를 말한다. 모든 말단 노드는 같은 높이에 있어야 하며, 마지막 단계에서 노드의 개수가 최대가 되어야 한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/posts/image_perfect_binary_tree.png&quot; alt=&quot;imageHashTable&quot; /&gt;&lt;/p&gt;

&lt;p&gt;트리의 경우는 내용이 다른 자료구조보다 많아서 2단계로 끊어갈려고 한다. 다음 포스팅에서는 트리의 순회 방식과 최소 힙, 최대 힙, 삽입, 최소 원소 뽑아내기 및 구현 등등과 같은 내용을 다룰려고 한다.&lt;/p&gt;</content><author><name>{&quot;name&quot;=&gt;nil, &quot;avatar&quot;=&gt;nil, &quot;bio&quot;=&gt;nil, &quot;location&quot;=&gt;nil, &quot;email&quot;=&gt;nil, &quot;links&quot;=&gt;[{&quot;label&quot;=&gt;&quot;Email&quot;, &quot;icon&quot;=&gt;&quot;fas fa-fw fa-envelope-square&quot;}, {&quot;label&quot;=&gt;&quot;Website&quot;, &quot;icon&quot;=&gt;&quot;fas fa-fw fa-link&quot;}, {&quot;label&quot;=&gt;&quot;Twitter&quot;, &quot;icon&quot;=&gt;&quot;fab fa-fw fa-twitter-square&quot;}, {&quot;label&quot;=&gt;&quot;Facebook&quot;, &quot;icon&quot;=&gt;&quot;fab fa-fw fa-facebook-square&quot;}, {&quot;label&quot;=&gt;&quot;GitHub&quot;, &quot;icon&quot;=&gt;&quot;fab fa-fw fa-github&quot;}, {&quot;label&quot;=&gt;&quot;Instagram&quot;, &quot;icon&quot;=&gt;&quot;fab fa-fw fa-instagram&quot;}]}</name></author><category term="Datastructure" /><category term="Tree" /><summary type="html">트리(Tree)</summary></entry><entry><title type="html">3개의 합</title><link href="http://localhost:4000/algorithm/3sum" rel="alternate" type="text/html" title="3개의 합" /><published>2020-02-09T00:00:00+09:00</published><updated>2020-02-09T00:00:00+09:00</updated><id>http://localhost:4000/algorithm/3sum</id><content type="html" xml:base="http://localhost:4000/algorithm/3sum">&lt;p&gt;하나의 리스트가 주어진다. 이 리스트 안의 임의의 값 3개를 골라 더해서 0이 되는 &lt;b&gt;리스트들&lt;/b&gt;을 찾아라.&lt;/p&gt;

&lt;h2 id=&quot;조건&quot;&gt;조건&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;리스트와 리스트의 값은 중복될 수 없다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;풀이&quot;&gt;풀이&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;배열의 사이즈가 2개 이하이면 빈 리스트를 반환한다.&lt;/li&gt;
  &lt;li&gt;받은 배열을 정렬한다.&lt;/li&gt;
  &lt;li&gt;배열의 사이즈 -2만큼 for loop를 돈다.(최소 3개의 값을 가져와야 하기 때문에)&lt;/li&gt;
  &lt;li&gt;start, end 값을 정한다.&lt;/li&gt;
  &lt;li&gt;i, start, end 값을 이용하여 3개의 값을 배열에서 가져와 더한다.&lt;/li&gt;
  &lt;li&gt;더한값이 0인경우 set 자료구조에 저장, 더한 값이 0보다 작은경우 start 값을 1개 더해주고, 아닌경우 end 값을 1개 빼준다.&lt;/li&gt;
  &lt;li&gt;Set을 List로 변환해서 반환한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Solution&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;threeSum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IntArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;emptyList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        
        &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;sortedNum&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sorted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HashSet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hashSetOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;until&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sortedNum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sortedNum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
            
            &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sortedNum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sortedNum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sortedNum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                       &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;listOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sortedNum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sortedNum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sortedNum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
                       
                    &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;++&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;end--&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;++&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;end--&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;toList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>{&quot;name&quot;=&gt;nil, &quot;avatar&quot;=&gt;nil, &quot;bio&quot;=&gt;nil, &quot;location&quot;=&gt;nil, &quot;email&quot;=&gt;nil, &quot;links&quot;=&gt;[{&quot;label&quot;=&gt;&quot;Email&quot;, &quot;icon&quot;=&gt;&quot;fas fa-fw fa-envelope-square&quot;}, {&quot;label&quot;=&gt;&quot;Website&quot;, &quot;icon&quot;=&gt;&quot;fas fa-fw fa-link&quot;}, {&quot;label&quot;=&gt;&quot;Twitter&quot;, &quot;icon&quot;=&gt;&quot;fab fa-fw fa-twitter-square&quot;}, {&quot;label&quot;=&gt;&quot;Facebook&quot;, &quot;icon&quot;=&gt;&quot;fab fa-fw fa-facebook-square&quot;}, {&quot;label&quot;=&gt;&quot;GitHub&quot;, &quot;icon&quot;=&gt;&quot;fab fa-fw fa-github&quot;}, {&quot;label&quot;=&gt;&quot;Instagram&quot;, &quot;icon&quot;=&gt;&quot;fab fa-fw fa-instagram&quot;}]}</name></author><category term="Algorithm" /><category term="LeetCode" /><summary type="html">하나의 리스트가 주어진다. 이 리스트 안의 임의의 값 3개를 골라 더해서 0이 되는 리스트들을 찾아라.</summary></entry><entry><title type="html">중복되는 가장 긴 단어 찾기</title><link href="http://localhost:4000/algorithm/longest_common_prefix" rel="alternate" type="text/html" title="중복되는 가장 긴 단어 찾기" /><published>2020-02-08T00:00:00+09:00</published><updated>2020-02-08T00:00:00+09:00</updated><id>http://localhost:4000/algorithm/longest_common_prefix</id><content type="html" xml:base="http://localhost:4000/algorithm/longest_common_prefix">&lt;p&gt;문자열에서 가장 긴 공통의 접두사(prefix)를 찾아보자!&lt;/p&gt;

&lt;h2 id=&quot;sampleinput&quot;&gt;SampleInput&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[&quot;flower&quot;,&quot;flow&quot;,&quot;flight&quot;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;sampleoutput&quot;&gt;SampleOutput&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;fl&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;sampleinput-1&quot;&gt;SampleInput&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[&quot;dog&quot;,&quot;racecar&quot;,&quot;car&quot;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;sampleoutput-1&quot;&gt;SampleOutput&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;풀이&quot;&gt;풀이&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;문자열이 비어있는지 체크한다.&lt;/li&gt;
  &lt;li&gt;prefix로 리스트의 첫번째 String을 변수에 저장한다.&lt;/li&gt;
  &lt;li&gt;리스트의 사이즈만큼 for loop를 돌고 그 안에서 prefix를 각 리스트의 String에 맞게 뒤에서부터 하나씩 제거한다.&lt;/li&gt;
  &lt;li&gt;공통된 문자열을 찾으면 prefix를 리턴, 아닌경우 빈 String을 리턴&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Solution&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;longestCommonPrefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;):&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;
        
        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;prefix&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;until&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;indexOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;prefix&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dropLast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prefix&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;참조&quot;&gt;참조&lt;/h2&gt;

&lt;p&gt;https://leetcode.com/problems/longest-common-prefix/&lt;/p&gt;</content><author><name>{&quot;name&quot;=&gt;nil, &quot;avatar&quot;=&gt;nil, &quot;bio&quot;=&gt;nil, &quot;location&quot;=&gt;nil, &quot;email&quot;=&gt;nil, &quot;links&quot;=&gt;[{&quot;label&quot;=&gt;&quot;Email&quot;, &quot;icon&quot;=&gt;&quot;fas fa-fw fa-envelope-square&quot;}, {&quot;label&quot;=&gt;&quot;Website&quot;, &quot;icon&quot;=&gt;&quot;fas fa-fw fa-link&quot;}, {&quot;label&quot;=&gt;&quot;Twitter&quot;, &quot;icon&quot;=&gt;&quot;fab fa-fw fa-twitter-square&quot;}, {&quot;label&quot;=&gt;&quot;Facebook&quot;, &quot;icon&quot;=&gt;&quot;fab fa-fw fa-facebook-square&quot;}, {&quot;label&quot;=&gt;&quot;GitHub&quot;, &quot;icon&quot;=&gt;&quot;fab fa-fw fa-github&quot;}, {&quot;label&quot;=&gt;&quot;Instagram&quot;, &quot;icon&quot;=&gt;&quot;fab fa-fw fa-instagram&quot;}]}</name></author><category term="Algorithm" /><category term="LeetCode" /><summary type="html">문자열에서 가장 긴 공통의 접두사(prefix)를 찾아보자!</summary></entry><entry><title type="html">물을 담은 용기</title><link href="http://localhost:4000/algorithm/container_with_water" rel="alternate" type="text/html" title="물을 담은 용기" /><published>2020-02-06T00:00:00+09:00</published><updated>2020-02-06T00:00:00+09:00</updated><id>http://localhost:4000/algorithm/container_with_most_water</id><content type="html" xml:base="http://localhost:4000/algorithm/container_with_water">&lt;p&gt;물을 담은 용기가 있다. 물을 담은 용기의 어느 세로 라인을 각각의 엔드포인트로 잡아야 물을 가장 많이 채울 수 있는지 찾아라!&lt;/p&gt;

&lt;h2 id=&quot;sampleinput&quot;&gt;SampleInput&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[1,8,6,2,5,4,8,3,7]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;sampleoutput&quot;&gt;SampleOutput&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;49
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;문제-풀이&quot;&gt;문제 풀이&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;주어진 Input을 통해 시작점과 끝점을 구한다.&lt;/li&gt;
  &lt;li&gt;루프를 돌면서 현재 시작점의과 끝점의 작은 값을 기준으로 최대넓이 구한다.&lt;/li&gt;
  &lt;li&gt;구한 최대넓이는 항상 제일 큰 값으로 갱신해준다.&lt;/li&gt;
  &lt;li&gt;시작점과 끝점중 작은값 이었던 지점을 한 칸씩 옮긴다.&lt;/li&gt;
  &lt;li&gt;구한 최대넓이를 반환한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Solution&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;maxArea&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IntArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;maxArea&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;
        
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;maxArea&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maxArea&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
            
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;++&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;right--&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxArea&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;참조&quot;&gt;참조&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;https://leetcode.com/problems/container-with-most-water/&lt;/li&gt;
&lt;/ul&gt;</content><author><name>{&quot;name&quot;=&gt;nil, &quot;avatar&quot;=&gt;nil, &quot;bio&quot;=&gt;nil, &quot;location&quot;=&gt;nil, &quot;email&quot;=&gt;nil, &quot;links&quot;=&gt;[{&quot;label&quot;=&gt;&quot;Email&quot;, &quot;icon&quot;=&gt;&quot;fas fa-fw fa-envelope-square&quot;}, {&quot;label&quot;=&gt;&quot;Website&quot;, &quot;icon&quot;=&gt;&quot;fas fa-fw fa-link&quot;}, {&quot;label&quot;=&gt;&quot;Twitter&quot;, &quot;icon&quot;=&gt;&quot;fab fa-fw fa-twitter-square&quot;}, {&quot;label&quot;=&gt;&quot;Facebook&quot;, &quot;icon&quot;=&gt;&quot;fab fa-fw fa-facebook-square&quot;}, {&quot;label&quot;=&gt;&quot;GitHub&quot;, &quot;icon&quot;=&gt;&quot;fab fa-fw fa-github&quot;}, {&quot;label&quot;=&gt;&quot;Instagram&quot;, &quot;icon&quot;=&gt;&quot;fab fa-fw fa-instagram&quot;}]}</name></author><category term="Algorithm" /><category term="LeetCode" /><summary type="html">물을 담은 용기가 있다. 물을 담은 용기의 어느 세로 라인을 각각의 엔드포인트로 잡아야 물을 가장 많이 채울 수 있는지 찾아라!</summary></entry></feed>